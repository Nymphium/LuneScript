pub class outStream {
    pub fn write(val:str);
}

pub class memStream extend outStream {
    let txt: str { pub };
    pub fn __init() {
        self.txt = "";
    }
    pub override fn write( val: str ) {
        self.txt = self.txt .. val;
    }
}

pub fn errorLog( message: str ) {
    let write = (io@stem).stderr.write@form;
    write( (io@stem).stderr, message .. "\n" );
}

pub fn debugLog() {
    for level = 2, 6 {
        let debugInfo = debug.getinfo( level )@Map<str,stem>;
        if debugInfo {
            errorLog( "-- %s %s" ( debugInfo[ "short_src" ],
                                   debugInfo[ 'currentline' ] ) );
        }
    }
}


pub fn profile( validTest:bool, func: stem, path: str ) {
    if not validTest {
        return func();
    }
    
    let profiler = require( 'ProFi' );
    profiler.start();
    
    let result:stem = func();
    
    profiler.stop();
    (profiler.writeReport@form)( path );

    return result;
}

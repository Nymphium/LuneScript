import lune.base.TransUnit;

pub class filterObj {
}

fn dump( prefix: str, depth: int, node: stem, txt: str ) {
    let typeStr = "";
    if node.expType and node.expType ~= TransUnit.typeInfo.None {
	typeStr = "(%s)" (node.expType.getTxt());
    }
    print( "%s: %s %s %s"
	   (prefix, TransUnit.getNodeKindName( node.kind ), txt, typeStr ) );
}

filterObj[ TransUnit.nodeKind.None ] =
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, index, node, "" );			      
    };

filterObj[ TransUnit.nodeKind.Import ] =
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, index, node, node.info );
    };

filterObj[ TransUnit.nodeKind.Root ] =
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, index, node, "" );
	foreach child, index in node.info.childlen {
	    TransUnit.nodeFilter( child, self, prefix .. "  ", depth + 1 );
	}	
    };

filterObj[ TransUnit.nodeKind.Block ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, index, node, "" );
	foreach statement, index in node.info.stmtList {
	    TransUnit.nodeFilter( statement, self, prefix .. "  ", depth + 1 );
	}	
    };  

filterObj[ TransUnit.nodeKind.StmtExp ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, index, node, "" );
	TransUnit.nodeFilter( node.info, self, prefix .. "  ", depth + 1 );
    };  

filterObj[ TransUnit.nodeKind.DeclClass ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, node.info.name.txt );

	foreach field, index in node.info.fieldList {
	    TransUnit.nodeFilter( field, self, prefix .. "  ", depth + 1 );
	}	
    };  

filterObj[ TransUnit.nodeKind.DeclMember ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, node.info.name.txt );
	TransUnit.nodeFilter( node.info.refType, self, prefix .. "  ", depth + 1 );
    };  


filterObj[ TransUnit.nodeKind.DeclVar ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	let varName = "";
	foreach var, index in node.info.varList {
	    varName = varName .. " " .. var[ "name" ].txt;
	}	
	dump( prefix, depth, node, varName );

	if node.info.expList {
	    TransUnit.nodeFilter( node.info.expList, self, prefix .. "  ", depth + 1 );
	}   
    };  

filterObj[ TransUnit.nodeKind.DeclArg ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, node.info.name.txt );

	TransUnit.nodeFilter( node.info.argType, self, prefix .. "  ", depth + 1 );
    };  

filterObj[ TransUnit.nodeKind.DeclArgDDD ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "..." );
    };  

filterObj[ TransUnit.nodeKind.ExpDDD ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "..." );
    };  

filterObj[ TransUnit.nodeKind.DeclFunc ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	let name = node.info.name;
	dump( prefix, depth, node, name and name.txt or "<anonymous>" );
	foreach arg, index in node.info.argList {
	    TransUnit.nodeFilter( arg, self, prefix .. "  ", depth + 1 );
	}	
	foreach refType, index in node.info.retTypeList {
	    TransUnit.nodeFilter( refType, self, prefix .. "  ", depth + 1 );
	}	    
	TransUnit.nodeFilter( node.info.body, self, prefix .. "  ", depth + 1 );
    };	

filterObj[ TransUnit.nodeKind.DeclMethod ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, node.info.name.txt );
	foreach arg, index in node.info.argList {
	    TransUnit.nodeFilter( arg, self, prefix .. "  ", depth + 1 );
	}	
	foreach refType, index in node.info.retTypeList {
	    TransUnit.nodeFilter( refType, self, prefix .. "  ", depth + 1 );
	}	    
	TransUnit.nodeFilter( node.info.body, self, prefix .. "  ", depth + 1 );
    };	

filterObj[ TransUnit.nodeKind.DeclConstr ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	filterObj[ TransUnit.nodeKind.DeclMethod ]( self, node, prefix, depth );
    };  

filterObj[ TransUnit.nodeKind.RefType ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node,
	      (node.info.refFlag and "&" or "") ..
	      (node.info.mutFlag and "mut " or "") );
	TransUnit.nodeFilter( node.info.name, self, prefix .. "  ", depth + 1 );
    };  

filterObj[ TransUnit.nodeKind.If ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "");

	foreach val, index in node.info {
	    print( prefix .. val[ 'kind' ] );
	    if val[ 'exp' ] {
		TransUnit.nodeFilter( val[ 'exp' ], self, prefix .. "  ", depth + 1 );
	    }   	
	    TransUnit.nodeFilter( val[ 'block' ], self, prefix .. "  ", depth + 1 );
	}	
    };  

filterObj[ TransUnit.nodeKind.While ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "");

	TransUnit.nodeFilter( node.info.exp, self, prefix .. "  ", depth + 1 );
	TransUnit.nodeFilter( node.info.block, self, prefix .. "  ", depth + 1 );
    };  

filterObj[ TransUnit.nodeKind.Repeat ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "");

	TransUnit.nodeFilter( node.info.block, self, prefix .. "  ", depth + 1 );
	TransUnit.nodeFilter( node.info.exp, self, prefix .. "  ", depth + 1 );
    };  

filterObj[ TransUnit.nodeKind.For ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, node.info.val.txt );

	TransUnit.nodeFilter( node.info.init, self, prefix .. "  ", depth + 1 );
	TransUnit.nodeFilter( node.info.to, self, prefix .. "  ", depth + 1 );
	if node.info.delta {
	    TransUnit.nodeFilter( node.info.delta, self, prefix .. "  ", depth + 1 );
	}	
	TransUnit.nodeFilter( node.info.block, self, prefix .. "  ", depth + 1 );
    };  

filterObj[ TransUnit.nodeKind.Apply ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	let varNames = "";
	foreach var, index in node.info.varList {
	    varNames = varNames .. var[ 'txt' ] .. " ";
	}	
	dump( prefix, depth, node, varNames );

	TransUnit.nodeFilter( node.info.exp, self, prefix .. "  ", depth + 1 );
	TransUnit.nodeFilter( node.info.block, self, prefix .. "  ", depth + 1 );
    };  

filterObj[ TransUnit.nodeKind.Foreach ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	let index = node.info.key and node.info.key.txt or "";
	dump( prefix, depth, node, node.info.val.txt .. " " .. index );

	TransUnit.nodeFilter( node.info.exp, self, prefix .. "  ", depth + 1 );
	TransUnit.nodeFilter( node.info.block, self, prefix .. "  ", depth + 1 );
    };  

filterObj[ TransUnit.nodeKind.Forsort ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	let index = node.info.key and node.info.key.txt or "";
	dump( prefix, depth, node, node.info.val.txt .. " " .. index );

	TransUnit.nodeFilter( node.info.exp, self, prefix .. "  ", depth + 1 );
	TransUnit.nodeFilter( node.info.block, self, prefix .. "  ", depth + 1 );
    };  


filterObj[ TransUnit.nodeKind.ExpCall ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "" );

	TransUnit.nodeFilter( node.info.func, self, prefix .. "  ", depth + 1 );
	if node.info.argList {
	    TransUnit.nodeFilter( node.info.argList, self, prefix .. "  ", depth + 1 );
	}	
    };  



filterObj[ TransUnit.nodeKind.ExpList ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "" );

	foreach exp, index in node.info {
	    TransUnit.nodeFilter( exp, self, prefix .. "  ", depth + 1 );
	}	
    };  

filterObj[ TransUnit.nodeKind.ExpOp1 ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, node.info.op.txt );

	TransUnit.nodeFilter( node.info.exp, self, prefix .. "  ", depth + 1 );
    };  

filterObj[ TransUnit.nodeKind.ExpCast ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "" );

	TransUnit.nodeFilter( node.info.exp, self, prefix .. "  ", depth + 1 );
	TransUnit.nodeFilter( node.info.castType, self, prefix .. "  ", depth + 1 );
    };  


filterObj[ TransUnit.nodeKind.ExpParen ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "()" );

	TransUnit.nodeFilter( node.info, self, prefix .. "  ", depth + 1 );
    };  

filterObj[ TransUnit.nodeKind.ExpOp2 ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, node.info.op.txt );

	node.info.exp1.filter( self, prefix .. "  ", depth + 1 );
	node.info.exp2.filter( self, prefix .. "  ", depth + 1 );
    };  


filterObj[ TransUnit.nodeKind.ExpNew ] =
    fn( self: stem, node: stem, prefix: str, depth: int )
{
    dump( prefix, depth, node, "" );

    TransUnit.nodeFilter( node.info.symbol, self, prefix .. "  ", depth + 1 );
    if node.info.argList {
	TransUnit.nodeFilter( node.info.argList, self, prefix .. "  ", depth + 1 );
    }
};

filterObj[ TransUnit.nodeKind.ExpRef ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, node.info.txt );
    };  

filterObj[ TransUnit.nodeKind.ExpRefItem ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "seq[exp]" );

	TransUnit.nodeFilter( node.info.val, self, prefix .. "  ", depth + 1 );
	TransUnit.nodeFilter( node.info.index, self, prefix .. "  ", depth + 1 );
    };  

filterObj[ TransUnit.nodeKind.RefField ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, node.info.field.txt );

	TransUnit.nodeFilter( node.info.prefix, self, prefix .. "  ", depth + 1 );
    };  

filterObj[ TransUnit.nodeKind.Return ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "" );

	TransUnit.nodeFilter( node.info, self, prefix .. "  ", depth + 1 );
    };  

filterObj[ TransUnit.nodeKind.LiteralList ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "[]" );

	TransUnit.nodeFilter( node.info, self, prefix .. "  ", depth + 1 );
    };  

filterObj[ TransUnit.nodeKind.LiteralMap ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "" );

	foreach pair in node.info.pairList {
	    TransUnit.nodeFilter( pair[ 'key' ], self, prefix .. "  ", depth + 1 );
	    TransUnit.nodeFilter( pair[ 'val' ], self, prefix .. "  ", depth + 1 );
	}
    };  


filterObj[ TransUnit.nodeKind.LiteralArray ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "[@]" );

	TransUnit.nodeFilter( node.info, self, prefix .. "  ", depth + 1 );
    };  


filterObj[ TransUnit.nodeKind.LiteralChar ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node,
	      string.format( "%s(%s)", node.info.num, node.info.token.txt ) );
    };  

filterObj[ TransUnit.nodeKind.LiteralInt ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node,
	      string.format( "%s(%s)", node.info.num, node.info.token.txt ) );
    };  

filterObj[ TransUnit.nodeKind.LiteralReal ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node,
	      string.format( "%s(%s)", node.info.num, node.info.token.txt ) );
    };  

filterObj[ TransUnit.nodeKind.LiteralString ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, node.info.token.txt );
    };  

filterObj[ TransUnit.nodeKind.LiteralBool ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, node.info.txt == "true" );
    };  

filterObj[ TransUnit.nodeKind.LiteralNil ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "" );
    };  

filterObj[ TransUnit.nodeKind.Break ] = 
    fn( self: stem, node: stem, prefix: str, depth: int ) {
	dump( prefix, depth, node, "" );
    };  
